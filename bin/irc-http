#!/usr/bin/env node

const assert = require('assert')
const express = require('express')
const bodyParser = require('body-parser')
const IRCClient = require('../irc-client')

const HTTP_PORT = process.env.HTTP_PORT || 3000
const HTTP_HOST = process.env.HTTP_HOST || ''
const IRC_HOST = process.env.IRC_HOST
const IRC_PORT = process.env.IRC_PORT || 6667
const IRC_NICK = process.env.IRC_NICK
const IRC_CHANNEL = process.env.IRC_CHANNEL
const DEBUG = process.env.DEBUG || false

// Quick sanity check
assert(IRC_HOST, 'Missing IRC_HOST')
assert(IRC_PORT, 'Missing IRC_PORT')
assert(IRC_NICK, 'Missing IRC_NICK')
assert(IRC_CHANNEL, 'Missing IRC_CHANNEL')

const app = express()

// To hold the server instance later on
let server

// IRC Client
console.log('IRC: Connecting to %s:%s as %s', IRC_HOST, IRC_PORT, IRC_NICK)
const client = new IRCClient({
  host: IRC_HOST,
  port: IRC_PORT,
  nick: IRC_NICK,
  debug: DEBUG
})

// HTTP API
app.enable('trust proxy')
app.use((req, res, next) => {
  console.log('WWW: %s %s %s', req.method, req.originalUrl, req.ip)
  next()
})
app.post(`/${IRC_CHANNEL}`, bodyParser.json(), (req, res, next) => {
  const msg = req.body.msg

  if (!msg || !msg.length)
    return res.status(400).json({error: 'Message must be longer than 0 chars'})

  //client.msg(`#${IRC_CHANNEL}`, msg)
  client.notice(`#${IRC_CHANNEL}`, msg)
  return res.status(204).end()
}, (err, req, res, next) => {
  const msg = err ? err.message || err : 'An error occured'
  return res.status(400).json({error: msg})
})
app.get(`/${IRC_CHANNEL}/topic`, (req, res, next) => {
  client.get_topic(IRC_CHANNEL, (err, topic) => {
    if (err) return res.status(500).json({error: 'An error occured while fetching topic'})
    res.status(200).json({
      channel: IRC_CHANNEL,
      topic: topic
    })
  })
})
app.use(
  (req, res, next) => {
    res.status(404).json({error: 'Not found'})
  },
  (err, req, res, next) => {
    console.error(err)
    res.status(500).json({error: 'Server error'})
  }
)

client.on('ready', () => client.join(`#${IRC_CHANNEL}`))
client.on('end', () => {
  // Close HTTP server on socket close
  if (server)
    server.close()
})
//client.on('msg', (msg) => console.log(msg))

// Set up HTTP After IRC has connected
client.once('ready', () => {
  console.log('IRC: Connected to server')

  server = app.listen(HTTP_PORT, HTTP_HOST, () => {
    console.log('WWW: Listening on %s:%d', HTTP_HOST, HTTP_PORT)
  })
  server.on('error', (err) => console.error(err))
})

// Docker container stop request
process.on('SIGTERM', () => {
  console.log('SIGTERM received')
  attemptExit()
})

// On CTRL+C
process.on('SIGINT', () => {
  console.log('SIGINT received')
  attemptExit()
})

// Handle process exit attempts
let quitAttempts = 0
function attemptExit () {
  if (++quitAttempts > 1) {
    console.error('Forcefully exiting!')
    process.exit(1)
  }
  console.log('IRC: Waiting for connection to close gracefully...')
  client.send('QUIT :quitting', () => {
    console.log('IRC: Quit successfully')
  })
  if (server) {
    server.close(() => {
      console.log('WWW: Stopped HTTP server')
    })
  }
}
